"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var analyzer_1 = require("./analyzer");
var path_1 = require("path");
var argsParser_1 = require("./argsParser");
var parser_1 = require("./parser");
var parseTsConfig = function (tsconfigPath) {
    var basePath = (0, path_1.resolve)((0, path_1.dirname)(tsconfigPath));
    try {
        var configFileName = ts.findConfigFile(basePath, ts.sys.fileExists, tsconfigPath);
        if (!configFileName)
            throw "Couldn't find ".concat(tsconfigPath);
        var configFile = ts.readConfigFile(configFileName, ts.sys.readFile);
        var result = ts.parseJsonConfigFileContent(configFile.config, ts.sys, basePath, undefined, tsconfigPath);
        if (result.errors.length)
            throw result.errors;
        // We now use absolute paths to avoid ambiguity and to be able to delegate baseUrl resolving to TypeScript.
        // A consequence is, we cannot fall back to '.' so instead the fallback is the tsconfig dir:
        // (I think this only occurs with unit tests!)
        return {
            baseUrl: result.options.baseUrl || basePath,
            paths: result.options.paths,
            files: result.fileNames,
        };
    }
    catch (e) {
        throw "\n    Cannot parse '".concat(tsconfigPath, "'.\n\n    ").concat(JSON.stringify(e), "\n  ");
    }
};
var loadTsConfig = function (tsconfigPath, explicitFiles) {
    var _a = parseTsConfig(tsconfigPath), baseUrl = _a.baseUrl, files = _a.files, paths = _a.paths;
    return { baseUrl: baseUrl, paths: paths, files: explicitFiles || files };
};
exports.default = (function (tsconfigPath, files) {
    var args = (0, argsParser_1.extractOptionsFromFiles)(files);
    var tsConfig = loadTsConfig(tsconfigPath, args.tsFiles);
    return (0, analyzer_1.default)((0, parser_1.default)(tsConfig, args.options), args.options);
});
//# sourceMappingURL=app.js.map